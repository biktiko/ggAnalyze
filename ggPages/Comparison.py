import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
# –¢–∞—Ä–∏—Ñ—ã Yandex –∏ gg
Yandex_tariffs = {
    "–°—Ç–∞—Ä—Ç": {"min_cost": 300, "free_min": 2.5, "free_km": 1, "city_km": 60, "city_min": 15},
    "–ö–æ–º—Ñ–æ—Ä—Ç": {"min_cost": 400, "free_min": 2.5, "free_km": 1, "city_km": 80, "city_min": 20},
    "–ö–æ–º—Ñ–æ—Ä—Ç+": {"min_cost": 500, "free_min": 2.5, "free_km": 1, "city_km": 100, "city_min": 25},
    "–ë–∏–∑–Ω–µ—Å": {"min_cost": 700, "free_min": 2.5, "free_km": 1, "city_km": 130, "city_min": 30},
}

gg_tariffs = {
    "ggEconom": {"min_cost": 400, "free_min": 15, "free_km": 1, "city_km": 100, "city_min": 20},
    "gg": {"min_cost": 600, "free_min": 15, "free_km": 1, "city_km": 100, "city_min": 20},
    "ggSpecial": {"min_cost": 800, "free_min": 15, "free_km": 1, "city_km": 150, "city_min": 30},
}

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏ –¥–ª—è Yandex
def calc_cost_yandex(tariff, km, minutes, surge):
    cost = tariff['min_cost'] + surge
    extra_km = max(0, km - tariff['free_km'])
    extra_min = max(0, minutes - tariff['free_min'])
    cost += extra_km * tariff['city_km'] + extra_min * tariff['city_min']
    return np.round(cost, -1)

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏ –¥–ª—è gg (–æ–∫—Ä—É–≥–ª—è–µ—Ç –∫–∏–ª–æ–º–µ—Ç—Ä—ã –≤–≤–µ—Ä—Ö)
def calc_cost_gg(tariff, km, minutes, surge):
    cost = tariff['min_cost'] + surge
    km = np.ceil(km) if km % 1 >= 0.1 else np.floor(km)
    extra_km = max(0, km - tariff['free_km'])
    extra_min = max(0, minutes - tariff['free_min'])
    cost += extra_km * tariff['city_km'] + extra_min * tariff['city_min']
    return round(cost / 100) * 100

# Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def comparison_show():

    st.title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ ")

    col1, col2 = st.columns(2)

    with col1:
        km = st.number_input("üõ£Ô∏è –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)", min_value=0.1, value=5.0, step=0.1)
        surge_gg = st.number_input("Surge price gg", min_value=0, step=50, value=0)
        is_corporate = st.checkbox("üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞")

    with col2:
        minutes = st.number_input("‚è≥ –í—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏ (–º–∏–Ω)", min_value=1, value=10, step=1)
        surge_yandex = st.number_input("Surge price Yandex", min_value=0, step=50, value=0)

    promo_code = st.number_input("üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ gg")

    results = []

    for name, tariff in Yandex_tariffs.items():
        cost = calc_cost_yandex(tariff, km, minutes, surge_yandex)
        if is_corporate:
            cost *= 1.12
        results.append({"–°–µ—Ä–≤–∏—Å": "Yandex", "–¢–∞—Ä–∏—Ñ": name, "–¶–µ–Ω–∞": round(cost)})

    for name, tariff in gg_tariffs.items():
        cost = calc_cost_gg(tariff, km, minutes, surge_gg) - promo_code
        results.append({"–°–µ—Ä–≤–∏—Å": "gg", "–¢–∞—Ä–∏—Ñ": name, "–¶–µ–Ω–∞": cost})

    st.subheader("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–æ–∫:")
    df = pd.DataFrame(results)
    df_sorted = df.sort_values(by="–¶–µ–Ω–∞")
    st.dataframe(df_sorted, use_container_width=True)

    st.subheader("üìä C—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤:")


    chart = alt.Chart(df_sorted).mark_bar().encode(
        x=alt.X('–¶–µ–Ω–∞', title='–¶–µ–Ω–∞ (÷è)', axis=alt.Axis(labelAngle=0)),
        y=alt.Y('–¢–∞—Ä–∏—Ñ:N', title='–¢–∞—Ä–∏—Ñ', sort='-x'),
        color=alt.Color('–°–µ—Ä–≤–∏—Å:N', scale=alt.Scale(scheme='category10')),
        tooltip=['–°–µ—Ä–≤–∏—Å', '–¢–∞—Ä–∏—Ñ', '–¶–µ–Ω–∞']
    ).properties(
        width=700,
        height=400
    ).interactive()

    st.altair_chart(chart, use_container_width=True)