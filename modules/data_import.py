# C:\Users\user\OneDrive\Desktop\Workspace\ggAnalyze\modules\data_import.py
import streamlit as st
from data_loader import load_data_from_file
import os
import pandas as pd

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
UPLOAD_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "uploaded_files")
os.makedirs(UPLOAD_DIR, exist_ok=True)

def save_uploaded_file(uploaded_file):
    file_path = os.path.join(UPLOAD_DIR, uploaded_file.name)
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    return file_path

def load_existing_files():
    return [os.path.join(UPLOAD_DIR, file) for file in os.listdir(UPLOAD_DIR) if file.endswith((".xlsx", ".csv"))]

def delete_file(file_path):
    if os.path.exists(file_path):
        os.remove(file_path)
        st.success(f"File {os.path.basename(file_path)} deleted successfully.")
    else:
        st.warning(f"File {os.path.basename(file_path)} not found.")

def upload_file():
    # –ï—Å–ª–∏ –≤ session_state –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö –∏–∑ –ø–∞–ø–∫–∏
    if "uploaded_files" not in st.session_state:
        st.session_state.uploaded_files = load_existing_files()
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
    if not st.session_state.uploaded_files:
        st.warning("No files found in uploads folder. Please upload a file.")
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –µ—Å—Ç—å, –Ω–æ –¥–∞–Ω–Ω—ã–µ (clever_data) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
        if "clever_data" not in st.session_state:
            st.session_state.clever_data = {}
        for file_path in st.session_state.uploaded_files:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–∞–π–ª—É –Ω–µ—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
            if file_path not in st.session_state.clever_data:
                st.session_state.clever_data[file_path] = load_data_from_file(file_path)
            else:
                file_data = st.session_state.clever_data[file_path]
                tips_empty = all(df.empty for df in file_data.get('ggtips', {}).values()) if isinstance(file_data.get('ggtips', {}), dict) else file_data.get('ggtips', pd.DataFrame()).empty
                # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª—é—á–µ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                if tips_empty:
                    st.session_state.clever_data[file_path] = load_data_from_file(file_path)
    
    # –ó–∞—Ç–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º file uploader –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    uploaded_file = st.file_uploader("Upload Excel or CSV file", type=["xlsx", "csv"])
    if uploaded_file:
        file_path = save_uploaded_file(uploaded_file)
        st.session_state.uploaded_files.append(file_path)
        st.session_state.clever_data[file_path] = load_data_from_file(file_path)
        st.success(f"File {uploaded_file.name} imported successfully.")

def show_file_navigator():
    if not st.session_state.uploaded_files:
        st.warning("No files uploaded yet.")
        return

    selected_file = st.selectbox(
        "Select a file to view its raw data",
        options=st.session_state.uploaded_files,
        format_func=os.path.basename
    )

    if selected_file:
        data_dict = st.session_state.clever_data.get(selected_file, {})

        if data_dict:
            # –ü–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä: –∫–ª—é—á –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è, –Ω–∞–ø—Ä–∏–º–µ—Ä 'ggtips', 'ggtipsCompanies', 'ggtipsPartners'
            main_key = st.selectbox("Select main key", options=list(data_dict.keys()))
            sub_data = data_dict.get(main_key)

            # –ï—Å–ª–∏ sub_data - —Å–ª–æ–≤–∞—Ä—å, –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–∏—Å—Ç –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ
            if isinstance(sub_data, dict):
                sub_key = st.selectbox("Select sheet", options=list(sub_data.keys()))
                df = sub_data.get(sub_key)
                st.subheader(f"Data from {os.path.basename(selected_file)} [{main_key} / {sub_key}]")
            else:
                df = sub_data
                st.subheader(f"Data from {os.path.basename(selected_file)} [{main_key}]")

            if df is not None:
                st.dataframe(df)
            else:
                st.warning("Selected sheet is empty or data not found.")
        else:
            st.warning("Data not loaded for selected file.")

def show():
    st.title("üìÅ Data Import and Viewer")

    upload_file()

    if st.session_state.uploaded_files:
        st.divider()
        st.subheader("üìÇ Uploaded Files")
        for idx, file_path in enumerate(st.session_state.uploaded_files):
            col1, col2 = st.columns([0.8, 0.2])
            col1.write(os.path.basename(file_path))

            unique_key = f"{file_path}_{idx}"
            if col2.button("Delete", key=unique_key):
                delete_file(file_path)
                st.session_state.uploaded_files.remove(file_path)
                st.session_state.clever_data.pop(file_path, None)
                st.rerun()

    st.divider()
    show_file_navigator()

if __name__ == "__main__":
    show()
